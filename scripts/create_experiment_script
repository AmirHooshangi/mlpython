#! /usr/bin/python

# Copyright 2011 David Brouillard & Guillaume Roy-Fontaine. All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without modification, are
# permitted provided that the following conditions are met:
# 
#    1. Redistributions of source code must retain the above copyright notice, this list of
#       conditions and the following disclaimer.
# 
#    2. Redistributions in binary form must reproduce the above copyright notice, this list
#       of conditions and the following disclaimer in the documentation and/or other materials
#       provided with the distribution.
# 
# THIS SOFTWARE IS PROVIDED BY David Brouillard & Guillaume Roy-Fontaine ``AS IS'' AND ANY EXPRESS OR IMPLIED
# WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
# FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL David Brouillard & Guillaume Roy-Fontaine OR
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
# ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
# 
# The views and conclusions contained in the software and documentation are those of the
# authors and should not be interpreted as representing official policies, either expressed
# or implied, of David Brouillard & Guillaume Roy-Fontaine.


# ex: python create_experiment_script TASK=classification DATASET=heart MODULE=mlpython.learners.third_party.milk.classification LEARNER=TreeClassifier RESULTS_FILE=result_file min_split criterion > script.py
# To execute the generated script: python script.py 3 \'information_gain\'


# (y)TODO: Verifier l'integralite des commentaires
# (y)TODO: Commentaire en anglais
# (y)TODO: Parametre optionnel et +
# (y)TODO: Verification des options parent par rapport au script enfant
# (y)TODO: L'ordre des params n'est pas gerer dans le script enfant pour le print dans le result_file
# (y)TODO: Gerer les tests retournant plus qu'un cost (pour le  result_file?)
# (y)TODO: Gerer EARLY_STOPPING param et ses param a lui
# TODO: Gerer EARLY_STOPPING dans le script enfant
# TODO: Dans une doc, expliquer que les quotes donc etre passee avec backslash


import os
import sys
from string import Template

if (len(sys.argv) >= 6):    
    arg_list = sys.argv
    arg_list.pop(0);	# Remove first argument

    # Parsing Keywords
    myKeyword = []
    myOption = []
    for x in arg_list:
        if x.find('=') == -1:
            myOption.append(x) # Option(s)
        else:
            myKeyword.append(x.partition('=')) # Main's parameters with '=' in it
    
        compteur_param = 0
        
	# Create a dictionary that will be used to substitute the template
	d = {}
	for x in myKeyword:
		d[x[0]] = x[2]
                # Check if all the main parameters are there
                # TODO Verifier avec Hugo pour l'importance de l'ordre
                if x[0] == "TASK":
                    compteur_param += 1
                elif x[0] == "MODULE":
                    compteur_param += 1
                elif x[0] == "LEARNER":
                    compteur_param += 1
                elif x[0] == "RESULTS_FILE":
                    compteur_param += 1
                elif x[0] == "DATASET":
                    compteur_param += 1
        #print x[0] + ' : ' + x[2]
    
    if compteur_param != 5:
        raise ValueError('There should be at least 5 parameters required. \'TASK\', \'DATASET\', \'MODULE\', \'LEARNER\' and \'RESULTS_FILE\'')
            
    # Verify if the param 'EARLY_STOPPING is provided
    ctr_EarlyStoppingParam = 0
    if 'EARLY_STOPPING' in d:
        # Verify if each of the 'EARLY_STOPPING' param are provided : 'BEG', 'INCR', 'END', 'LOOK_AHEAD'
        raiseEarlyStoppingError = 0
        for item in range(5):
            if item == 0:
                if 'BEG' in d:
                    #print "BEG!"
                    ctr_EarlyStoppingParam += 1
                else:
                    print "BEG PAS LA!"
                    raiseEarlyStoppingError = 1
                    break
            elif item == 1:
                if 'INCR' in d:
                    #print "INCR!"
                    ctr_EarlyStoppingParam += 1
                else:
                    print "INCR PAS LA!"
                    raiseEarlyStoppingError = 1
                    break
            elif item == 2:
                if 'END' in d:
                    #print "END!"
                    ctr_EarlyStoppingParam += 1
                else:
                    print "END PAS LA!"
                    raiseEarlyStoppingError = 1
                    break
            elif item == 3:
                if 'LOOK_AHEAD' in d:
                    #print "LOOK_AHEAD!"
                    ctr_EarlyStoppingParam += 1
                else:
                    print "LOOK_AHEAD PAS LA!"
                    raiseEarlyStoppingError = 1
                    break
                    
        if raiseEarlyStoppingError == 1:
            raise ValueError('There are 4 parameters required with the \'EARLY_STOPPING\' option. \'BEG\', \'INCR\', \'END\', \'LOOK_AHEAD\'')
            
    #if ctr_EarlyStoppingParam == 4:
        #print 'EARLY_STOPPING CORRECT!'
    
    # Create a string that will be used in the child script to generate the header
    str_ParamOptionName = "\'\'"
    if len(myOption) > 1:
        str_ParamOptionName = "\'"
        for item in myOption:
            str_ParamOptionName += item
            str_ParamOptionName += "\\t"
    
        str_ParamOptionName += "\'"
    
    # Substitute dictionary's keywords in the template
    result = 'import numpy as np\n'
    result += 'import os\n'
    result += 'import sys\n'
    result += 'import fcntl\n'
    result += 'import copy\n'
    result += 'from string import Template\n'
    result += 'import mlpython.datasets.store as dataset_store\n'
    result += Template('from $MODULE import ${LEARNER}\n\n').safe_substitute(d)
    result += Template('trainset,validset,testset = dataset_store.get_${TASK}_problem(\'${DATASET}\')\n\n').safe_substitute(d)
    result += 'str_ParamOption = ""\n'
    result += 'str_ParamOptionValue = ""\n'
    result += 'if (len(sys.argv) > 1):\n'
    result += '    str_ParamOptionNameFromParent = ' + str_ParamOptionName + '\n\n'
    result += '    OptionNameFromParent = []\n'
    result += '    for item in str_ParamOptionNameFromParent.split("\\t"):\n'
    result += '        OptionNameFromParent.append(item)\n\n'
    result += '    OptionNameFromParent.remove("") # Remove empty string in the list\n\n' 
    result += '    arg_list = sys.argv\n'
    result += '    arg_list.pop(0);	# Remove first argument\n\n'
    result += '    myKeyword = []\n'
    result += '    for x in arg_list:\n'
    result += '        myKeyword.append(x) # Option(s)\n\n'
    result += '    # Check if every option(s) from parent\'s script are here.\n'
    result += '    if ' + str(len(myOption)) + ' != len(myKeyword):\n'
    result += '        raise ValueError(\'Parameter(s) must be in that order: \' + str_ParamOptionNameFromParent)\n'
    result += '    for index, item in enumerate(myKeyword):\n'
    result += '        str_ParamOption += OptionNameFromParent[index]\n'
    result += '        str_ParamOption += \'=\' \n'
    result += '        str_ParamOption += item\n'
    result += '        if ((index+1) < len(myKeyword)): # If not the last\n'
    result += '            str_ParamOptionValue += item+\'\\t\'\n'
    result += '            str_ParamOption += \', \'\n'
    result += '        else:\n'
    result += '            str_ParamOptionValue += item\n\n'
    result += Template('    str_myObject = \'myObject = ${LEARNER}(\' + str_ParamOption + \')\'\n\n').safe_substitute(d)
    result += '    print str_ParamOption\n'
    result += '    code = compile(str_myObject, \'<string>\', \'exec\')\n'
    result += '    exec code\n'
    result += 'else:\n'
    result += Template('    myObject = ${LEARNER}()\n\n').safe_substitute(d)
    #result += 'model = myObject.train(trainset)\n'
    
    result += '# Check if early stopping is set\n'
    result += 'if ' + str(ctr_EarlyStoppingParam) + ' > 0:\n'
    result += '    best_val_error = np.inf\n'
    result += '    best_it = 0\n'
    
    result += Template('    look_ahead = ${LOOK_AHEAD}\n').safe_substitute(d)
    result += '    n_incr_error = 0\n'

    result += Template('    for stage in range(${BEG},${END}+1,${INCR}):\n').safe_substitute(d)
    result += '        if not n_incr_error < look_ahead:\n'
    result += '            break\n'
    result += Template('        myObject.${EARLY_STOPPING} = stage\n').safe_substitute(d)
    result += '        myObject.train(trainset)\n'

    result += '        n_incr_error += 1\n'
    result += '        print \'Evaluating on validation set\'\n'
    result += '        outputs, costs = myObject.test(validset)\n'
    result += '        error = np.mean(costs[:,0])   # costs[:,EARLY_STOPPING_COST_ID]\n'
    result += '        print \'Error =\' + str(error)\n'
    result += '        if error < best_val_error:\n'
    result += '            best_val_error = error\n'
    result += '            best_it = stage\n'
    result += '            n_incr_error = 0\n'
    result += '            best_model = copy.deepcopy(myObject)\n'

    result += '    outputs_tr,costs_tr = best_model.test(trainset)\n'
    result += '    nombre_col = costs_tr.shape[1]\n'
    result += '    outputs_v,costs_v = best_model.test(validset)\n'
    result += '    outputs_t,costs_t = best_model.test(testset)\n\n'
    result += 'else:\n'
    result += '    outputs_tr,costs_tr = myObject.test(trainset)\n'
    result += '    nombre_col = costs_tr.shape[1]\n'
    result += '    outputs_v,costs_v = myObject.test(validset)\n'
    result += '    outputs_t,costs_t = myObject.test(testset)\n\n'
    
    result += 'str_header = ""\n'
    result += 'str_modelinfo = ""\n'
    result += 'if nombre_col > 1:\n'
    result += '    train = ""\n'
    result += '    valid = ""\n'
    result += '    test = ""\n\n'
    result += '    # Get average of each costs\n'
    result += '    for index in range(nombre_col):\n'
    result += '        train = str(np.mean(costs_tr,axis=0)[index])\n'
    result += '        valid = str(np.mean(costs_v,axis=0)[index])\n'
    result += '        test = str(np.mean(costs_t,axis=0)[index])\n'
    result += '        str_header += \'train\' + str(index+1) + \'\\tvalid\' + str(index+1) + \'\\ttest\' + str(index+1) + \'\\t\'\n'
    result += '        str_modelinfo += train + \'\\t\' + valid + \'\\t\' + test + \'\\t\'\n'
    result += '    str_header += \'\\n\'\n'
    result += 'else:\n'
    result += '    str_header = \'train1\\tvalid1\\ttest1\\n\'\n\n'
    result += '    train_error = str(np.mean(costs_tr,axis=0)[0])\n'
    result += '    valid_error = str(np.mean(costs_v,axis=0)[0])\n'
    result += '    test_error = str(np.mean(costs_t,axis=0)[0])\n'
    result += '    str_modelinfo = train_error + \'\\t\' + valid_error + \'\\t\' + test_error\n\n'
    result += '# Preparing result file\n'
    result += 'header_line = ""\n'
    if len(myOption) > 1: # If more options was set
        result += 'header_line += ' + str_ParamOptionName + '\n'
    result += 'header_line += str_header\n'
    result += Template('result_file = \'${RESULTS_FILE}\'\n\n').safe_substitute(d)
    result += 'if not os.path.exists(result_file):\n'
    result += '    f = open(result_file, \'w\')\n'
    result += '    f.write(header_line)\n'
    result += '    f.close()\n\n'
    result += '# Look if there is optional values to display\n'
    result += 'if str_ParamOptionValue == "":\n'
    result += '    model_info = [str_modelinfo]\n'
    result += 'else:\n'
    result += '    model_info = [str_ParamOptionValue,str_modelinfo]\n\n'
    result += 'line = \'\\t\'.join(model_info)+\'\\n\'\n'
    result += 'f = open(result_file, "a")\n'
    result += 'fcntl.flock(f.fileno(), fcntl.LOCK_EX)\n'
    result += 'f.write(line)\n'
    result += 'f.close() # unlocks the file\n'
    
    print result # Print result in a file (' > ' must be used)
else:
    print "You must provide at least 5 parameter"
    print "ex: python create_experiment_script TASK=classification DATASET=heart MODULE=mlpython.learners.third_party.milk.classification LEARNER=TreeClassifier RESULTS_FILE=result_file min_split criterion > script.py"


