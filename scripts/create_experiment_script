#! /usr/bin/python

# Copyright 2011 David Brouillard & Guillaume Roy-Fontaine. All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without modification, are
# permitted provided that the following conditions are met:
# 
#    1. Redistributions of source code must retain the above copyright notice, this list of
#       conditions and the following disclaimer.
# 
#    2. Redistributions in binary form must reproduce the above copyright notice, this list
#       of conditions and the following disclaimer in the documentation and/or other materials
#       provided with the distribution.
# 
# THIS SOFTWARE IS PROVIDED BY David Brouillard & Guillaume Roy-Fontaine ``AS IS'' AND ANY EXPRESS OR IMPLIED
# WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
# FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL David Brouillard & Guillaume Roy-Fontaine OR
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
# ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
# 
# The views and conclusions contained in the software and documentation are those of the
# authors and should not be interpreted as representing official policies, either expressed
# or implied, of David Brouillard & Guillaume Roy-Fontaine.


# ex: python create_experiment_script TASK=classification DATASET=heart MODULE=mlpython.learners.third_party.milk.classification LEARNER=TreeClassifier RESULTS_FILE=result_file min_split criterion > script.py
# To execute the generated script: python mon_script.py min_split=3 criterion=\'information_gain\'


# (y)TODO: Verifier l'integralite des commentaires
# (y)TODO: Commentaire en anglais
# (y)TODO: Parametre optionnel et +
# TODO: Gerer les tests retournant plus qu'un cost (pour le result_file?)
# TODO: Doit-on mettre la valeur de l'option dans le header du result_file?
# TODO: Doit-on override le result_file? Pour l'instant on doit l'effacer pour re-tester
# TODO: Dans une doc, expliquer que les quotes donc etre passee avec backslash

import os
import sys
from string import Template

if (len(sys.argv) >= 6):    
    arg_list = sys.argv
    arg_list.pop(0);	# Remove first argument

    # -----------------------------------------------------------------
    # Parsing Keywords
    myKeyword = []
    myOption = []
    for x in arg_list:
        if x.find('=') == -1:
            myOption.append(x) # Option(s)
        else:
            myKeyword.append(x.partition('=')) # Mains parameters with '=' in it
    # -----------------------------------------------------------------
    
	# -----------------------------------------------------------------
	# Create a dictionary that will be used to substitute the template
	d = {}
	for x in myKeyword:
		d[x[0]] = x[2]
        #print x[0] + ' : ' + x[2]
	# -----------------------------------------------------------------
    
    # -----------------------------------------------------------------
    # Substitute dictionary's keywords in the template
    result = 'import numpy as np\n'
    result += 'import os\n'
    result += 'import sys\n'
    result += 'import fcntl\n'
    result += 'from string import Template\n'
    result += 'import mlpython.datasets.store as dataset_store\n'
    result += Template('from $MODULE import ${LEARNER}\n\n').safe_substitute(d)
    result += Template('dataset_store.download(\'${DATASET}\')\n').safe_substitute(d)
    result += Template('trainset,validset,testset = dataset_store.get_${TASK}_problem(\'${DATASET}\')\n\n').safe_substitute(d)
    result += 'str_ParamOption = ""\n'
    result += 'str_ParamOptionName = ""\n'
    result += 'str_ParamOptionValue = ""\n'
    result += 'if (len(sys.argv) > 1):\n'
    result += '    arg_list = sys.argv\n'
    result += '    arg_list.pop(0);	# Remove first argument\n\n'
    result += '    myKeyword = []\n'
    result += '    for x in arg_list:\n'
    result += '        if x.find(\'=\') != -1:\n'
    result += '            myKeyword.append(x.partition(\'=\')) # Mains parameters with \'=\' in it\n'
    result += '    for index, item in enumerate(myKeyword):\n'
    result += '        str_ParamOption += item[0]\n'
    result += '        str_ParamOptionName += item[0]\n'
    result += '        str_ParamOptionName += \'\\t\'\n'
    result += '        str_ParamOption += \'=\' \n'
    result += '        str_ParamOption += item[2]\n'
    result += '        if ((index+1) < len(myKeyword)): # If not the last\n'
    result += '            str_ParamOptionValue += item[2]+\'\\t\'\n'
    result += '            str_ParamOption += \', \'\n\n'
    result += '        else:\n'
    result += '            str_ParamOptionValue += item[2]\n'
    result += Template('    str_myObject = \'myObject = ${LEARNER}(\' + str_ParamOption + \')\'\n\n').safe_substitute(d)
    result += '    code = compile(str_myObject, \'<string>\', \'exec\')\n'
    result += '    exec code\n'
    result += 'else:\n'
    result += Template('    myObject = ${LEARNER}()\n\n').safe_substitute(d)
    result += 'model = myObject.train(trainset)\n'
    result += 'outputs_tr,costs_tr = myObject.test(trainset)\n'
    result += 'outputs_v,costs_v = myObject.test(validset)\n'
    result += 'outputs_t,costs_t = myObject.test(testset)\n\n'
    result += 'train_error = str(np.mean(costs_tr,axis=0)[0])\n'
    result += 'valid_error = str(np.mean(costs_v,axis=0)[0])\n'
    result += 'test_error = str(np.mean(costs_t,axis=0)[0])\n'
    result += '# Preparing result file\n'
    result += '# Todo: Handle multiple result test\n'
    result += 'header_line = ""\n'
    result += 'header_line += str_ParamOptionName\n'
    result += 'header_line += \'train1\\tvalid1\\ttest1\\n\'\n\n'
    result += Template('result_file = \'${RESULTS_FILE}\'\n\n').safe_substitute(d)
    result += 'if not os.path.exists(result_file):\n'
    result += '    f = open(result_file, \'w\')\n'
    result += Template('    f.write("Results of the learner: $LEARNER")\n').safe_substitute(d)
    result += '    f.write(\'\\n\\n\')\n'
    result += '    f.close()\n'
    result += 'if str_ParamOptionValue == "":\n'
    result += '    model_info = [str(train_error),str(valid_error),str(test_error)]\n'
    result += 'else:\n'
    result += '    model_info = [str_ParamOptionValue,str(train_error),str(valid_error),str(test_error)]\n'
    result += 'line = \'\\t\'.join(model_info)+\'\\n\\n\'\n'
    result += 'file = open(result_file, "a")\n'
    result += 'fcntl.flock(file.fileno(), fcntl.LOCK_EX)\n'
    result += 'file.write(header_line)\n'
    result += 'file.write(line)\n'
    result += 'file.close() # unlocks the file\n'
    
    print result # Print result in a file (' > ' must be used)
    # -----------------------------------------------------------------
else:
    print "You must provide at least 5 parameter"
    print "ex: python create_experiment_script TASK=classification DATASET=heart MODULE=mlpython.learners.third_party.milk.classification LEARNER=TreeClassifier RESULTS_FILE=result_file min_split criterion > script.py"


